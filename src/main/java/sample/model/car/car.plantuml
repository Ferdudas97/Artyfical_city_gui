@startuml

title __CAR's Class Diagram__\n

  package sample {
    package sample.model.car {
      class Car {
          - currentSpeed : Double
          - maxSpeed : Double
          - size : int
          - accelerationFunction : Function<Double, Double>
          + Car()
          + move()
          - moveNodes()
          - changeStrip()
          - changeToTheFastestPossible()
          - setPresenceToNewNodes()
          - removePresenceFromPreviousNodes()
          - isStripEndingSoon()
          - getTheNodeWithTheLongestDistance()
          - randomDecisionAboutChangingStrip()
          - getDifferenceBeetwenDistanceAndSpeedOfTheClosestCar()
          - getStripWithMaximumPossibleSpeed()
          - getMaximumPossibleSpeedOnStrip()
          - shouldBrake()
          - checkStripDistance()
          - checkIfIsEnoughSpace()
          - acceleratedSpeed()
          - maxSpeedAHead()
          - brakeSpeed()
          - isEndOfMap()
          - Car()
          {static} + of()
          + getCurrentSpeed()
          + getMaxSpeed()
          + getHead()
          + getSize()
          + getId()
          + getAccelerationFunction()
      }
    }
  }
  

  package sample {
    package sample.model.car {
      class CarFactory {
          {static} + creatorMap : Map<CarType, Function<Node, Car>>
      }
    }
  }
  

  package sample {
    package sample.model.car {
      interface CarCreator {
          {abstract} + createCar()
      }
    }
  }
  

  package sample {
    package sample.model.car {
      class CarHolder {
          {static} + cars : Map<CarId, Car>
          {static} + addCar()
          {static} + removeCar()
          {static} + getAllCars()
          {static} + clear()
      }
    }
  }
  

  package sample {
    package sample.model.car {
      class CarId {
          - id : String
          - CarId()
          {static} + of()
          + toString()
          + equals()
          # canEqual()
          + hashCode()
          + getId()
      }
    }
  }
  

  package sample {
    package sample.model.car {
      enum CarType {
        BIG
        MEDIUM
        SMALL
        random
        VALUES
      }
    }
  }
  

  Car o-- Node : head
  Car o-- CarId : id
  CarFactory +-down- CarCreator


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
